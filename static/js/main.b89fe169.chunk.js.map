{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","name","users","style","textAlign","className","PieChart","width","height","Pie","dataKey","isAnimationActive","cx","cy","outerRadius","fill","label","Tooltip","BarChart","margin","top","right","left","bottom","barSize","XAxis","scale","padding","YAxis","Legend","CartesianGrid","strokeDasharray","Bar","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAkGeA,EApFH,WACV,IAAMC,EAAO,CACX,CAAEC,KAAM,WAAYC,MAAO,KAC3B,CAAED,KAAM,YAAaC,MAAO,MAC5B,CAAED,KAAM,SAAUC,MAAO,KACzB,CAAED,KAAM,WAAYC,MAAO,MAG7B,OACE,sBAAKC,MAAO,CAAEC,UAAW,UAAzB,UACE,oDACA,sBAAKC,UAAU,MAAf,cAAsB,gCACpB,eAACC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAA9B,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,mBAAmB,EACnBX,KAAMA,EACNY,GAAI,IACJC,GAAI,IACJC,YAAa,GACbC,KAAK,UACLC,OAAK,IAEP,cAACC,EAAA,EAAD,OAGF,eAACX,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAA9B,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,mBAAmB,EACnBX,KAAMA,EACNY,GAAI,IACJC,GAAI,IACJC,YAAa,GACbC,KAAK,UACLC,OAAK,IAEP,cAACC,EAAA,EAAD,UAIF,gCACE,eAACX,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAA9B,UACA,cAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,mBAAmB,EACnBX,KAAMA,EACNY,GAAI,IACJC,GAAI,IACJC,YAAa,GACbC,KAAK,UACLC,OAAK,IAEP,cAACC,EAAA,EAAD,OAGF,eAACC,EAAA,EAAD,CACEX,MAAO,IACPC,OAAQ,IACRR,KAAMA,EACNmB,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GAEVC,QAAS,GAVX,UAYE,cAACC,EAAA,EAAD,CACEf,QAAQ,OACRgB,MAAM,QACNC,QAAS,CAAEL,KAAM,GAAID,MAAO,MAE9B,cAACO,EAAA,EAAD,IACA,cAACX,EAAA,EAAD,IACA,cAACY,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAKtB,QAAQ,QAAQK,KAAK,UAAUkB,WAAY,CAAElB,KAAM,aApC1D,cC3COmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b89fe169.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  PieChart,\n  Pie,\n  Tooltip,\n  BarChart,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  Bar,\n} from \"recharts\";\n\nconst App = () => {\n  const data = [\n    { name: \"Facebook\", users: 2000000000 },\n    { name: \"Instagram\", users: 1500000000 },\n    { name: \"Twiter\", users: 1000000000 },\n    { name: \"Telegram\", users: 500000000 },\n  ];\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Socail Media Users</h1>\n      <div className=\"App\"> <div>\n        <PieChart width={400} height={400}>\n          <Pie\n            dataKey=\"users\"\n            isAnimationActive={false}\n            data={data}\n            cx={200}\n            cy={200}\n            outerRadius={40}\n            fill=\"#8884d8\"\n            label\n          />\n          <Tooltip />\n        </PieChart>\n        \n        <PieChart width={400} height={400}>\n          <Pie\n            dataKey=\"users\"\n            isAnimationActive={false}\n            data={data}\n            cx={200}\n            cy={200}\n            outerRadius={40}\n            fill=\"#8884d8\"\n            label\n          />\n          <Tooltip />\n        </PieChart>\n         </div>\n        \n        <div>\n          <PieChart width={400} height={400}>\n          <Pie\n            dataKey=\"users\"\n            isAnimationActive={false}\n            data={data}\n            cx={200}\n            cy={200}\n            outerRadius={40}\n            fill=\"#8884d8\"\n            label\n          />\n          <Tooltip />\n        </PieChart>\n\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 80,\n            bottom: 5,\n          }}\n          barSize={20}\n        > \n          <XAxis\n            dataKey=\"name\"\n            scale=\"point\"\n            padding={{ left: 10, right: 10 }}\n          />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Bar dataKey=\"users\" fill=\"#8884d8\" background={{ fill: \"#eee\" }} />\n        </BarChart> </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}